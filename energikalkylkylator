import React, { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

const energySavings = {
  "Smart värmereglering": 10,
  "Injustering av värmesystem": 5,
  "Frånluftsåtervinning med värmepump": 25,
};

const serviceDetails = {
  "Smart värmereglering": {
    description: "Genom att implementera smart värmereglering kan en genomsnittlig energibesparing på 10% uppnås.",
    costPerApartment: 1500 // kr
  },
  "Injustering av värmesystem": {
    description: "Genom injustering av befintligt värmesystem kan en genomsnittlig besparing på 5% uppnås.",
    costPerApartment: 2000
  },
  "Frånluftsåtervinning med värmepump": {
    description: "Genom att installera frånluftsåtervinning kan en energibesparing på upp till 25% uppnås.",
    costPerApartment: null // ingen fast kostnad, man får kontakta
  }
};

export default function EnergyCalculator() {
  const [heatingSystem, setHeatingSystem] = useState("");
  const [annualCost, setAnnualCost] = useState("");
  const [numApartments, setNumApartments] = useState("");
  const [selectedService, setSelectedService] = useState("");
  const [savings, setSavings] = useState(null);
  const [savingsAmount, setSavingsAmount] = useState(null);
  const [totalSavings, setTotalSavings] = useState(null);
  const [investment, setInvestment] = useState(null);
  const [paybackTime, setPaybackTime] = useState(null);
  const [additionalInfo, setAdditionalInfo] = useState("");
  const [isCalculating, setIsCalculating] = useState(false);
  const [countdown, setCountdown] = useState(3);
  const [error, setError] = useState("");

  const calculateSavings = () => {
    if (!selectedService || !annualCost || !numApartments || numApartments <= 0) {
      setError("Vänligen fyll i alla fält korrekt innan du beräknar.");
      return;
    }

    setError("");
    setIsCalculating(true);
    setCountdown(3);

    let interval = setInterval(() => {
      setCountdown((prev) => {
        if (prev === 1) {
          clearInterval(interval);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    setTimeout(() => {
      const savingsPercentage = energySavings[selectedService] || 0;
      const estimatedSavings = (parseFloat(annualCost) * savingsPercentage) / 100;
      const totalEstimatedSavings = estimatedSavings * parseInt(numApartments);

      const service = serviceDetails[selectedService];
      const totalInvestment = service.costPerApartment
        ? service.costPerApartment * parseInt(numApartments)
        : null;

      const payback = totalInvestment && totalEstimatedSavings > 0
        ? (totalInvestment / totalEstimatedSavings).toFixed(1)
        : null;

      setSavings(savingsPercentage);
      setSavingsAmount(Math.round(estimatedSavings));
      setTotalSavings(Math.round(totalEstimatedSavings));
      setInvestment(totalInvestment);
      setPaybackTime(payback);
      setAdditionalInfo(service);
      setIsCalculating(false);
    }, 3000);
  };

  return (
    <Card className="p-6 w-full max-w-lg mx-auto bg-[#CBE8F1] border border-[#003366] rounded-lg shadow-md">
      <CardContent>
        <h2 className="text-2xl font-bold uppercase mb-4 text-[#003366]">Energikalkylator</h2>

        {error && <p className="text-red-600 mb-2">{error}</p>}

        <label className="block text-[#003366] font-semibold">Välj värmesystem</label>
        <select 
          value={heatingSystem} 
          onChange={(e) => setHeatingSystem(e.target.value)} 
          className="w-full p-2 border rounded mb-2 bg-white"
        >
          <option value="">Välj värmesystem</option>
          <option value="Fjärrvärme">Fjärrvärme</option>
          <option value="Bergvärme">Bergvärme</option>
          <option value="Direktverkande el">Direktverkande el</option>
        </select>

        <label className="block text-[#003366] font-semibold">Årlig energikostnad per lägenhet (kr)</label>
        <Input
          type="number"
          placeholder="Ange kostnad i kronor"
          value={annualCost}
          onChange={(e) => setAnnualCost(e.target.value)}
          className="w-full p-2 border rounded mb-2"
        />

        <label className="block text-[#003366] font-semibold">Antal lägenheter</label>
        <Input
          type="number"
          placeholder="Ange antal lägenheter"
          value={numApartments}
          onChange={(e) => setNumApartments(e.target.value)}
          className="w-full p-2 border rounded mb-2"
        />

        <label className="block text-[#003366] font-semibold">Välj energibesparingsåtgärd</label>
        <select 
          value={selectedService} 
          onChange={(e) => setSelectedService(e.target.value)} 
          className="w-full p-2 border rounded mb-2 bg-white"
        >
          <option value="">Välj åtgärd</option>
          {Object.keys(energySavings).map((service) => (
            <option key={service} value={service}>{service}</option>
          ))}
        </select>

        <Button onClick={calculateSavings} className="mt-4 bg-[#003366] text-white px-4 py-2 rounded">
          Beräkna besparing
        </Button>

        {isCalculating && (
          <div className="mt-4 text-center">
            <p className="text-lg font-bold text-[#003366]">Analyserar data... Vänta <span className="text-[#007bff]">{countdown}</span> sekunder</p>
            <div className="relative w-full h-3 bg-gray-300 rounded overflow-hidden mt-2">
              <div className="absolute left-0 top-0 h-full bg-[#007bff] transition-all duration-1000 ease-in-out" 
                style={{ width: `${(3 - countdown) * 33.3}%` }}>
              </div>
            </div>
          </div>
        )}

        {!isCalculating && savingsAmount !== null && (
          <div className="mt-4 text-md text-[#003366] space-y-1">
            <p><strong>Besparing per lägenhet:</strong> {savingsAmount} kr/år ({savings}%)</p>
            <p><strong>Total årlig besparing:</strong> {totalSavings} kr</p>
            {investment !== null ? (
              <>
                <p><strong>Uppskattad investeringskostnad:</strong> {investment} kr</p>
                <p><strong>Återbetalningstid:</strong> {paybackTime} år</p>
              </>
            ) : (
              <p><strong>Investering:</strong> Kontakta oss för offert.</p>
            )}
            <p><strong>Beskrivning:</strong> {additionalInfo.description}</p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
